import 'package:cognitive/cognitive_app.dart';
import 'package:cognitive/features/database_config.dart';
import 'package:cognitive/features/login+registration/utils/auth_manager.dart';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:postgres/postgres.dart';

class SurveyScreen extends StatefulWidget {

  const SurveyScreen({super.key});

  @override
  State<SurveyScreen> createState() => _SurveyScreenState();
}

class _SurveyScreenState extends State<SurveyScreen> {
  final TextEditingController _specialtyController = TextEditingController();
  final TextEditingController _diseasesController = TextEditingController();
  final TextEditingController _sportsController = TextEditingController();
  final TextEditingController _wellBeingController = TextEditingController();
  bool isButtonDisabled = false;
  bool _isMounted = true; // –§–ª–∞–≥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

  int? _age;
  String? _gender;
  String? _education;
  String? _residence;
  int? _height;
  int? _weight;
  String? _dominantHand;
  bool? _smoking;
  String? _alcohol;
  bool? _insomnia;
  bool? _gamer;
  int? _wellBeing;

  final _formKey = GlobalKey<FormState>();

  @override
  void dispose() {
    _isMounted = false; // –£–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –≤–∏–¥–∂–µ—Ç –±–æ–ª—å—à–µ –Ω–µ —Å–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω
    _specialtyController.dispose();
    _diseasesController.dispose();
    _sportsController.dispose();
    _wellBeingController.dispose();
    super.dispose();
  }

  @override
  void initState() {
    super.initState();
    _isMounted = true;
  }

    void _goToTests() {
    debugPrint("User are going to successReg");
    Navigator.of(context).pushNamed(
      '/successReg',
    );
  }

  Future<bool> resultsToDB() async {
    // –ë–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É
    if (_isMounted) {
      setState(() {
        isButtonDisabled = true;
      });
    }

    // –°–±—Ä–æ—Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∫–Ω–æ–ø–∫–∏ —á–µ—Ä–µ–∑ 4 —Å–µ–∫—É–Ω–¥—ã
    Future.delayed(const Duration(seconds: 4), () {
      if (_isMounted) {
        setState(() {
          isButtonDisabled = false;
        });
      }
    });

  try {
    
    final conn = await Connection.open(
      Endpoint(
        host: DatabaseConfig.host,
        port: DatabaseConfig.port,
        database: DatabaseConfig.database,
        username: DatabaseConfig.username,
        password: DatabaseConfig.password,
      ),
      settings: ConnectionSettings(sslMode: SslMode.disable),
    );

    debugPrint('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–¥ –∏–∑ resultsToDB —É—Å–ø–µ—à–Ω–æ');

    final userId = AuthManager.getUserId();

    //request processing
    final sendResults = await conn.execute(
    Sql.named('''
    SELECT cognitive."f\$users__write_form"(
    vp_user_id => @vp_user_id, 
    vp_age => @vp_age,
    vp_education => @vp_education,
    vp_speciality => @vp_speciality,
    vp_residence => @vp_residence,
    vp_height => @vp_height,
    vp_weight => @vp_weight,
    vp_lead_hand => @vp_lead_hand,
    vp_diseases => @vp_diseases,
    vp_smoking => @vp_smoking,
    vp_alcohol => @vp_alcohol,
    vp_sport => @vp_sport,
    vp_insomnia => @vp_insomnia,
    vp_current_health => @vp_current_health,
    vp_gaming => @vp_gaming

    )'''
    ),
    parameters: {
      'vp_user_id': userId,  
      'vp_age': _age,
      'vp_education': _education,
      'vp_speciality': _specialtyController.text,
      'vp_residence': _residence,
      'vp_height': _height,
      'vp_weight': _weight,
      'vp_lead_hand': _dominantHand,
      'vp_diseases': _diseasesController.text,
      'vp_smoking': _smoking,
      'vp_alcohol': _alcohol,
      'vp_sport': _sportsController.text,
      'vp_insomnia': _insomnia,
      'vp_current_health': _wellBeing,
      'vp_gaming': _gamer,
    },
  );

  debugPrint('$sendResults');
  final result = sendResults.first.first == null;

  conn.close();
  return result;
    
  } catch (e) {
    debugPrint('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–¥ –∏–∑ resultsToDB: $e');
    _showDatabaseError('–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é');
    return false;
    }
  }

  void _showDatabaseError(String errorMessage) {
  scaffoldMessengerKey.currentState?.showSnackBar(
    SnackBar(
      content: Text(
        errorMessage,
        style: const TextStyle(fontSize: 16),
      ),
      backgroundColor: Color.fromARGB(255, 227, 49, 37),
      duration: const Duration(seconds: 3),
    ),
  );
}

  @override
  Widget build(BuildContext context) {
    debugPrint(AuthManager.getUsername());
    return Scaffold(
      backgroundColor: const Color(0xFF373737),
      appBar: AppBar(
        automaticallyImplyLeading: false, // –°–∫—Ä—ã—Ç—å —Å—Ç—Ä–µ–ª–∫—É "–ù–∞–∑–∞–¥"
        title: const Text(
          '–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ',
          style: TextStyle(color: Colors.white),
        ),
        backgroundColor: const Color(0xFF373737),
        centerTitle: true,
        elevation: 0,
      ),
      body: SingleChildScrollView(
        padding: const EdgeInsets.all(16.0),
        child: Form(
          key: _formKey,
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              _buildNumberField(
                label: '–í–æ–∑—Ä–∞—Å—Ç',
                onChanged: (value) => _age = int.tryParse(value),
                validator: (value) {
                  if (value == null || value.isEmpty) {
                    return '–≠—Ç–æ –ø–æ–ª–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ';
                  }
                  if (int.tryParse(value) == null) {
                    return '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç';
                  }
                  return null;
                },
              ),
              const SizedBox(height: 16),
              const Text('–ö–∞–∫ –≤—ã —Å–µ–±—è —á—É–≤—Å—Ç–≤—É–µ—Ç–µ —Å–µ–π—á–∞—Å?', style: TextStyle(color: Colors.white)),
              const SizedBox(height: 8),
              Row(
                mainAxisAlignment: MainAxisAlignment.spaceAround,
                children: List.generate(5, (index) {
                  List<String> emojis = ['üò¢', 'üôÅ', 'üòê', 'üôÇ', 'üòÅ'];
                  return GestureDetector(
                    onTap: () {
                      setState(() {
                        _wellBeing = index;
                      });
                    },
                    child: Container(
                      padding: const EdgeInsets.all(10),
                      decoration: BoxDecoration(
                        shape: BoxShape.circle,
                        color: _wellBeing == index ? Colors.white : Colors.transparent,
                      ),
                      child: Text(
                        emojis[index],
                        style: TextStyle(fontSize: 30),
                      ),
                    ),
                  );
                }),
              ),

              const SizedBox(height: 16),
              _buildDropdownField(
                label: '–ë–∞–∑–æ–≤–æ–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ',
                value: _education,
                items: [
                  '–û—Å–Ω–æ–≤–Ω–æ–µ –æ–±—â–µ–µ',
                  '–°—Ä–µ–¥–Ω–µ–µ –æ–±—â–µ–µ',
                  '–í—ã—Å—à–µ–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ: –±–∞–∫–∞–ª–∞–≤—Ä–∏–∞—Ç',
                  '–í—ã—Å—à–µ–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ: –º–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä–∞, —Å–ø–µ—Ü–∏–∞–ª–∏—Ç–µ—Ç',
                ],
                onChanged: (value) => setState(() => _education = value),
                validator: (value) => value == null ? '–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ' : null,
              ),
              const SizedBox(height: 16),
              _buildTextField(
                controller: _specialtyController,
                hintText: '–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å',
                validator: (value) => value == null || value.isEmpty ? '–≠—Ç–æ –ø–æ–ª–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ' : null,
              ),
              const SizedBox(height: 16),
              _buildDropdownField(
                label: '–ú–µ—Å—Ç–æ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è',
                value: _residence,
                items: [
                  '–°—Ç–æ–ª–∏—á–Ω—ã–π –≥–æ—Ä–æ–¥ (–ú–æ—Å–∫–≤–∞ –∏–ª–∏ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥)',
                  '–û–±–ª–∞—Å—Ç–Ω–æ–π —Ü–µ–Ω—Ç—Ä',
                  '–†–∞–π–æ–Ω–Ω—ã–π —Ü–µ–Ω—Ç—Ä',
                  '–ú–∞–ª—ã–π –≥–æ—Ä–æ–¥ –∏–ª–∏ –ø–æ—Å–µ–ª–æ–∫ –≥–æ—Ä–æ–¥—Å–∫–æ–≥–æ —Ç–∏–ø–∞',
                  '–î–µ—Ä–µ–≤–Ω—è/—Å–µ–ª–æ'
                ],
                onChanged: (value) => setState(() => _residence = value),
                validator: (value) => value == null ? '–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—Ç–æ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è' : null,
              ),
              const SizedBox(height: 16),
              _buildNumberField(
                label: '–†–æ—Å—Ç (—Å–º)',
                onChanged: (value) => _height = int.tryParse(value),
                validator: (value) {
                  if (value == null || value.isEmpty) {
                    return '–≠—Ç–æ –ø–æ–ª–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ';
                  }
                  if (int.tryParse(value) == null) {
                    return '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–æ—Å—Ç';
                  }
                  return null;
                },
              ),
              const SizedBox(height: 16),
              _buildNumberField(
                label: '–í–µ—Å (–∫–≥)',
                onChanged: (value) => _weight = int.tryParse(value),
                validator: (value) {
                  if (value == null || value.isEmpty) {
                    return '–≠—Ç–æ –ø–æ–ª–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ';
                  }
                  if (int.tryParse(value) == null) {
                    return '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å';
                  }
                  return null;
                },
              ),
              const SizedBox(height: 16),
              _buildDropdownField(
                label: '–í–µ–¥—É—â–∞—è —Ä—É–∫–∞',
                value: _dominantHand,
                items: ['–ü—Ä–∞–≤–∞—è', '–õ–µ–≤–∞—è'],
                onChanged: (value) => setState(() => _dominantHand = value),
                validator: (value) => value == null ? '–í—ã–±–µ—Ä–∏—Ç–µ –≤–µ–¥—É—â—É—é —Ä—É–∫—É' : null,
              ),
              const SizedBox(height: 16),
              _buildTextField(
                controller: _diseasesController,
                hintText: '–ó–∞–±–æ–ª–µ–≤–∞–Ω–∏—è',
                validator: (value) => value == null || value.isEmpty ? '–≠—Ç–æ –ø–æ–ª–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ' : null,
              ),
              const SizedBox(height: 16),
              _buildSwitchField(
                label: '–ö—É—Ä–µ–Ω–∏–µ',
                value: _smoking,
                onChanged: (value) => setState(() => _smoking = value),
              ),
              const SizedBox(height: 16),
              _buildDropdownField(
                label: '–ö–∞–∫ —á–∞—Å—Ç–æ –í—ã —É–ø–æ—Ç—Ä–µ–±–ª—è–µ—Ç–µ –∞–ª–∫–æ–≥–æ–ª—å–Ω—ã–µ –Ω–∞–ø–∏—Ç–∫–∏?',
                value: _alcohol,
                items: [
                  '–ù–∏–∫–æ–≥–¥–∞',
                  '–†–∞–∑ –≤ –º–µ—Å—è—Ü –∏–ª–∏ —Ä–µ–∂–µ',
                  '2-4 —Ä–∞–∑–∞ –≤ –º–µ—Å—è—Ü',
                  '2-3 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é',
                  '4 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é –∏ —á–∞—â–µ'
                ],
                onChanged: (value) => setState(() => _alcohol = value),
                validator: (value) => value == null ? '–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç—å' : null,
              ),
              const SizedBox(height: 16),
              _buildTextField(
                controller: _sportsController,
                hintText: '–ö–∞–∫–∏–º —Å–ø–æ—Ä—Ç–æ–º –∑–∞–Ω–∏–º–∞–µ—Ç–µ—Å—å',
                validator: (value) => value == null || value.isEmpty ? '–≠—Ç–æ –ø–æ–ª–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ' : null,
              ),
              const SizedBox(height: 16),
              _buildSwitchField(
                label: '–ë–µ—Å—Å–æ–Ω–Ω–∏—Ü–∞',
                value: _insomnia,
                onChanged: (value) => setState(() => _insomnia = value),
              ),
              const SizedBox(height: 16),
              _buildSwitchField(
                label: '–Ø–≤–ª—è–µ—Ç–µ—Å—å –ª–∏ –ª—é–±–∏—Ç–µ–ª–µ–º –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã—Ö –∏–≥—Ä',
                value: _gamer,
                onChanged: (value) => setState(() => _gamer = value),
              ),
              const SizedBox(height: 24),
              Center(
              child: const Text(
                '–ü–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Å–∏–º –í–∞—Å —Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á–∏—Ç—å—Å—è –∏ –ø–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø—Ä–æ–π—Ç–∏ –≤—Å–µ —à–µ—Å—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤. –≠—Ç–æ –∑–∞–π–º–µ—Ç –ø—Ä–∏–º–µ—Ä–Ω–æ 15 –º–∏–Ω—É—Ç',
                style: TextStyle(color: Colors.white), 
                textAlign: TextAlign.center,
              ),
              ),
            const SizedBox(height: 24),
              Center(
                child: ElevatedButton(
                  style: ElevatedButton.styleFrom(
                  backgroundColor: const Color(0xFF4A4A4A), //  —Ü–≤–µ—Ç –∫–Ω–æ–ø–∫–∏
                  foregroundColor: Colors.white, // —Ü–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏
                ),
                  onPressed: isButtonDisabled
                  ? null
                  : () async {
                              if (_wellBeing == null) {
            ScaffoldMessenger.of(context).showSnackBar(
              const SnackBar(
                content: Text('–û—Ü–µ–Ω–∏—Ç–µ —Å–≤–æ–µ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ'),
                backgroundColor: Colors.red,
              ),
            );
            return;
          }
    
                    if (_formKey.currentState?.validate() ?? false) {
                      final isResultsSendSuccess = await resultsToDB();
                      if (isResultsSendSuccess) {
                      AuthManager.setUserLoggedIn(true);
                      _goToTests();
                      }
                    }
                  },
                  child: const Text('–ü–µ—Ä–µ–π—Ç–∏ –∫ —Ç–µ—Å—Ç–∞–º'),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }

Widget _buildTextField({
  required TextEditingController controller,
  required String hintText,
  String? Function(String?)? validator,
}) {
  return Container(
    decoration: BoxDecoration(
      color: const Color(0xFF4A4A4A),
      borderRadius: BorderRadius.circular(8.0),
    ),
    child: TextFormField(
      controller: controller,
      style: const TextStyle(color: Colors.white),
      decoration: InputDecoration(
        hintText: hintText,
        hintStyle: const TextStyle(color: Colors.grey),
        border: InputBorder.none,
        contentPadding: const EdgeInsets.symmetric(horizontal: 16, vertical: 14),
      ),
      validator: validator,
      inputFormatters: [
        FilteringTextInputFormatter.allow(RegExp(r'[–ê-–Ø–∞-—è–Å—ë\s]+')),
      ],
    ),
  );
}


  Widget _buildNumberField({
    required String label,
    required ValueChanged<String> onChanged,
    String? Function(String?)? validator,
  }) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text(
          label,
          style: const TextStyle(color: Colors.white),
        ),
        const SizedBox(height: 8),
        Container(
          decoration: BoxDecoration(
            color: const Color(0xFF4A4A4A),
            borderRadius: BorderRadius.circular(8.0),
          ),
          child: TextFormField(
            keyboardType: TextInputType.number,
            style: const TextStyle(color: Colors.white),
            decoration: const InputDecoration(
              hintText: '–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ',
              hintStyle: TextStyle(color: Colors.grey),
              border: InputBorder.none,
              contentPadding: EdgeInsets.symmetric(horizontal: 16, vertical: 14),
            ),
            onChanged: onChanged,
            validator: validator,
          ),
        ),
      ],
    );
  }

  Widget _buildDropdownField({
    required String label,
    required String? value,
    required List<String> items,
    required ValueChanged<String?> onChanged,
    String? Function(String?)? validator,
  }) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text(
          label,
          style: const TextStyle(color: Colors.white),
        ),
        const SizedBox(height: 8),
        DropdownButtonFormField<String>(
          value: value,
          isExpanded: true,
          dropdownColor: const Color(0xFF4A4A4A),
          icon: const Icon(Icons.arrow_drop_down, color: Colors.white),
          decoration: InputDecoration(
            filled: true,
            fillColor: const Color(0xFF4A4A4A),
            border: OutlineInputBorder(
              borderRadius: BorderRadius.circular(8.0),
              borderSide: BorderSide.none,
            ),
          ),
          style: const TextStyle(color: Colors.white),
          items: items.map((item) {
            return DropdownMenuItem<String>(
              value: item,
              child: Text(item),
            );
          }).toList(),
          onChanged: onChanged,
          validator: validator,
        ),
      ],
    );
  }

  Widget _buildSwitchField({
    required String label,
    required bool? value,
    required ValueChanged<bool?> onChanged,
  }) {
    return Row(
      mainAxisAlignment: MainAxisAlignment.spaceBetween,
      children: [
        Text(
          label,
          style: const TextStyle(color: Colors.white),
        ),
        Switch(
          value: value ?? false,
          onChanged: (bool newValue) => onChanged(newValue),
        ),
      ],
    );
  }

}
